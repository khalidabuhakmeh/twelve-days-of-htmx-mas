@page
@model Htmxmas.Pages.Samples.Day_05.Index

<div class="row">
    <style>
        .abs-wrapper {
            position: relative;
            width: 100%;
            height: 100%;
            border: 10px solid black;
            border-radius: 10px;
        }
        .abs-wrapper::after {
            content: "";
            display: block;
            clear: both;
        }
        .moon {
            position: absolute;
            top: 6em;
            right: 5em;
            width: 25%;
        }
        .sleigh {
            position: absolute;
            bottom: 30px;
            left: 1em;
            width: 25%;
        }
        #whee {
            border: 4px solid black;
            border-radius: 10px;
            position: absolute;
            bottom: 170px;
            left: 1em;
            padding: 1em;
            background: white;
            color: black;
            font-style: italic;
            opacity: 1;
            transition: 250ms ease-in;
        }
        #whee.htmx-request {
            background-color: red;
            color: white;
            font-style: italic;
            transition: 250ms ease-in;
        }
    </style>
    <div class="col-6">
        <markdown>
            # Day 5: Infinite Scroll Sleigh Ride
            
            We mentioned previously that Htmx can respond to any event on the page. In this example,
            we'll use the `intersect once` trigger to load more houses as the user scrolls (inside the image).
            
            Pay attention to Santa's speech bubble, as it will change color when the JavaScript event
            triggers an additional request to load more scenery.
            
            While the demo is playful, this technique can be used to create an infinite scroll experience
            in scenarios where a user may be scrolling indefinitely. This includes applications such as social media 
            sites, real-time chat applications, and more.
            
            ## How Does It Work?
            
            With a collection of elements, you only need to add the Htmx attributes to the very last element of the collection.
            When this element comes on screen, it will trigger the request. The use of `once` ensures that the request is only
            ever made once.
            
            ```razor
            <img src="~/img/sleigh/bg.png" alt="background" style="display:block; width: 100%; margin: 0;"/>
            <img src="~/img/sleigh/bg_2.png" alt="background" style="display:block; width: 100%; margin: 0;"/>
            <img src="~/img/sleigh/bg_3.png" alt="background" style="display:block; width: 100%; margin: 0;"
                 hx-get
                 hx-page="Index"
                 hx-page-handler="Houses"
                 hx-trigger="intersect once"
                 hx-swap="afterend"
                 hx-indicator="#whee"
            />
            ```
            
            You can also use the `revealed` trigger to load more content if you have a vertical scrolling experience and
            are not using the CSS overflow rules.
        </markdown>
        
        @await Html.PartialAsync("_Paging", new PagingModel(5))
    </div>
    <div class="col-6">
        <div class="abs-wrapper">
            <div
                id="houses"
                class="background"
                style="display: flex; overflow-x:scroll;">
                @await Html.PartialAsync("_Houses")
            </div>
            <div id="whee">Wheeeeeeeeeeeeee!</div>
            <img alt="santa on sleigh" src="~/img/sleigh/sleigh.png" class="sleigh"/>
            <img alt="the moon with stars" src="~/img/sleigh/moon.png" class="moon"/>
        </div>
    </div>
</div>